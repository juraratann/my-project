// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

// ตาราง ลูกค้า
model User {
  id       Int       @id @default(autoincrement())
  role     Role      @default(USER)
  name     String?
  lname    String
  address  String
  phone    String
  email    String
  username String    @unique
  password String
  Member   Member[]
  Order    Order[]
  Product  Product[]

  @@map("users")
}

// ตาราง การขายสินค้า
model Sale {
  id           Int           @id @default(autoincrement())
  date         DateTime
  total        Int           @default(10)
  discount     Int?
  member       Member        @relation(fields: [memberId], references: [id])
  memberId     Int           @map("member_id")
  Sale_Details Sale_Detail[]
}

// ตาราง สมาชิก
model Member {
  id     Int     @id @default(autoincrement())
  name   String?
  phone  String?
  point  Int?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @map("user_id")
  Sales  Sale[]
}

//ตารางรายละเอียดการขาย
model Sale_Detail {
  id        Int     @id @default(autoincrement())
  detail    String
  sale      Sale    @relation(fields: [saleId], references: [id])
  saleId    Int     @map("sale_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  Amount    Int     @default(10)
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(200)
  detail       String        @db.VarChar(200)
  price        Int
  stock        String        @db.VarChar(200)
  user         User          @relation(fields: [userId], references: [id])
  userId       Int           @map("user_id")
  Sale_Details Sale_Detail[]
  Order        Order[]

  @@map("products")
}

model Order {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId Int     @map("payment_id")
  amount    Int
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Int
  date      DateTime
  promptpay Int
  Order     Order[]
}

enum Status {
  PENDING
  DOING
  DONE
}
